syntax = "proto3";

package io.afloatdb.raft.proto;

import "RaftEndpoint.proto";
import "KV.proto";

option java_multiple_files = true;

// This file contains proto definitions for MicroRaft's RaftMessage APIs
// and KV request/response messages of AfloatDB API.

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/groupop/UpdateRaftGroupMembersOp.java
message UpdateRaftGroupMembersOpProto {
    repeated RaftEndpointProto member = 1;
    repeated RaftEndpointProto votingMember = 2;
    RaftEndpointProto endpoint = 3;

    // https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/MembershipChangeMode.java
    enum MembershipChangeModeProto {
        ADD_LEARNER = 0;
        ADD_OR_PROMOTE_TO_FOLLOWER = 1;
        REMOVE_MEMBER = 2;
    }

    MembershipChangeModeProto mode = 4;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/statemachine/StateMachine.java#L120
message StartNewTermOpProto {
}

message Operation {
    oneof operation {
        UpdateRaftGroupMembersOpProto updateRaftGroupMembersOp = 1;
        StartNewTermOpProto startNewTermOp = 2;
        io.afloatdb.kv.proto.PutRequest putRequest = 3;
        io.afloatdb.kv.proto.SetRequest setRequest = 4;
        io.afloatdb.kv.proto.GetRequest getRequest = 5;
        io.afloatdb.kv.proto.ContainsRequest containsRequest = 6;
        io.afloatdb.kv.proto.DeleteRequest deleteRequest = 7;
        io.afloatdb.kv.proto.RemoveRequest removeRequest = 8;
        io.afloatdb.kv.proto.ReplaceRequest replaceRequest = 9;
        io.afloatdb.kv.proto.SizeRequest sizeRequest = 10;
        io.afloatdb.kv.proto.ClearRequest clearRequest = 11;
    }
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/log/LogEntry.java
message LogEntryProto {
    int32 term = 1;
    int64 index = 2;
    Operation operation = 3;
}

message KVEntry {
    string key = 1;
    io.afloatdb.kv.proto.TypedValue value = 2;
}

message KVSnapshotChunkData {
    repeated KVEntry entry = 1;
    //    bytes data = 1;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/log/RaftGroupMembersView.java
message RaftGroupMembersViewProto {
    int64 logIndex = 1;
    repeated RaftEndpointProto member = 2;
    repeated RaftEndpointProto votingMember = 3;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/log/SnapshotChunk.java
message KVSnapshotChunk {
    int32 term = 1;
    int64 index = 2;
    KVSnapshotChunkData operation = 3;
    int32 snapshotChunkIndex = 4;
    int32 snapshotChunkCount = 5;
    RaftGroupMembersViewProto groupMembersView = 6;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/log/SnapshotEntry.java
message SnapshotEntryProto {
    int32 term = 1;
    int64 index = 2;
    repeated KVSnapshotChunk snapshotChunk = 3;
    RaftGroupMembersViewProto groupMembersView = 4;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/VoteRequest.java
message VoteRequestProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    int32 lastLogTerm = 4;
    int64 lastLogIndex = 5;
    bool sticky = 6;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/VoteResponse.java
message VoteResponseProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    bool granted = 4;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/AppendEntriesRequest.java
message AppendEntriesRequestProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    int32 prevLogTerm = 4;
    int64 prevLogIndex = 5;
    int64 commitIndex = 6;
    repeated LogEntryProto entry = 7;
    int64 querySequenceNumber = 8;
    int64 flowControlSequenceNumber = 9;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/AppendEntriesSuccessResponse.java
message AppendEntriesSuccessResponseProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    int64 lastLogIndex = 4;
    int64 querySequenceNumber = 5;
    int64 flowControlSequenceNumber = 6;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/AppendEntriesFailureResponse.java
message AppendEntriesFailureResponseProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    int64 expectedNextIndex = 4;
    int64 querySequenceNumber = 5;
    int64 flowControlSequenceNumber = 6;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/InstallSnapshotRequest.java
message InstallSnapshotRequestProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    bool senderLeader = 4;
    int32 snapshotTerm = 5;
    int64 snapshotIndex = 6;
    int32 totalSnapshotChunkCount = 7;
    KVSnapshotChunk snapshotChunk = 8;
    repeated RaftEndpointProto snapshottedMember = 9;
    RaftGroupMembersViewProto groupMembersView = 10;
    int64 querySequenceNumber = 12;
    int64 flowControlSequenceNumber = 13;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/InstallSnapshotResponse.java
message InstallSnapshotResponseProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    int64 snapshotIndex = 4;
    int32 requestedSnapshotChunkIndex = 5;
    int64 querySequenceNumber = 6;
    int64 flowControlSequenceNumber = 7;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/PreVoteRequest.java
message PreVoteRequestProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    int32 lastLogTerm = 4;
    int64 lastLogIndex = 5;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/PreVoteResponse.java
message PreVoteResponseProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    bool granted = 4;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/TriggerLeaderElectionRequest.java
message TriggerLeaderElectionRequestProto {
    string groupId = 1;
    RaftEndpointProto sender = 2;
    int32 term = 3;
    int32 lastLogTerm = 4;
    int64 lastLogIndex = 5;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/model/message/RaftMessage.java
message RaftMessageRequest {
    oneof message {
        VoteRequestProto voteRequest = 1;
        VoteResponseProto voteResponse = 2;
        AppendEntriesRequestProto appendEntriesRequest = 3;
        AppendEntriesSuccessResponseProto appendEntriesSuccessResponse = 4;
        AppendEntriesFailureResponseProto appendEntriesFailureResponse = 5;
        InstallSnapshotRequestProto installSnapshotRequest = 6;
        InstallSnapshotResponseProto installSnapshotResponse = 7;
        PreVoteRequestProto preVoteRequest = 8;
        PreVoteResponseProto preVoteResponse = 9;
        TriggerLeaderElectionRequestProto triggerLeaderElectionRequest = 10;
    }
}

message RaftMessageResponse {
    int32 status = 1;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/RaftNode.java#L253
message ReplicateRequest {
    Operation operation = 1;
}

// https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/RaftNode.java#L294
message QueryRequest {
    Operation operation = 1;

    // https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/QueryPolicy.java
    enum QUERY_POLICY {
        EVENTUAL_CONSISTENCY = 0;
        BOUNDED_STALENESS = 1;
        LEADER_LEASE = 2;
        LINEARIZABLE = 3;
    }

    QUERY_POLICY queryPolicy = 2;
    int64 minCommitIndex = 3;
}

// Service definition for receiving protos of the RaftMessage RPC APIs.
// Implementations of this service will pass those objects to RaftNode
// instances. This is an internal service definition which will be used
// for communication between RaftNode instances running inside different
// processes and possibly different machines.
service RaftMessageHandler {
    // https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/RaftNode.java#L225
    rpc handle (stream RaftMessageRequest) returns (RaftMessageResponse) {
    }
}

// Service definition for receiving calls to RaftNode's public APIs for
// replicating operations and running queries of the AfloatDB KV API.
service RaftInvocationHandler {
    // // https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/RaftNode.java#L253
    rpc replicate (ReplicateRequest) returns (io.afloatdb.kv.proto.KVResponse) {
    }
    // https://github.com/MicroRaft/MicroRaft/blob/master/microraft/src/main/java/io/microraft/RaftNode.java#L294
    rpc query (QueryRequest) returns (io.afloatdb.kv.proto.KVResponse) {
    }
}


